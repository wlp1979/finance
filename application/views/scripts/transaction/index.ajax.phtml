<div id="transaction-forms">
	<div class="transaction-form ui-widget-content ui-corner-all">
		<h3>New Transaction</h3>
		<?= $this->form ?>
		<div class="buttons">
			<?= $this->button(array(
				'id' => 'new-transaction', 
				'text' => 'Save',
				'class' => 'right', 
				'url' => array('controller' => 'transaction', 'action' => 'edit'),
				)); ?>
			<div class="clearfix"></div>
		</div>
	</div>
	<div class="transaction-form ui-widget-content ui-corner-all">
		<h3>Import Transactions</h3>
		<input id="upload-input" name="transactions" type="file" />
	</div>
</div>
<div id="transaction-table">
	<table>
		<thead>
			<tr>
				<th>Date</th>
				<th>Check</th>
				<th>Description</th>
				<th>Amount</th>
				<th>Expense</th>
				<th>Action</th>
			</tr>
		</thead>
		<tbody>
			<?php $row = 0; ?>
			<?php foreach($this->transactions as $transaction) : ?>
			<?php $rowClass = ($row++ % 2 == 0) ? 'even' : 'odd'; ?>
			<tr class="transaction <?= $rowClass ?>" data-transaction="<?= $transaction->id  ?>">
				<td class="date"><?= $transaction->displayDate() ?></td>
				<td class="check_num">
				<?php if($transaction->check_num > 0) : ?>
					<?= $transaction->check_num ?>
				<?php else: ?>
					&nbsp;
				<?php endif; ?>
				</td>
				<td class="description"><?= $transaction->description ?></td>
				<td class="amount"><?= $transaction->displayCurrency() ?></td>
				<td class="expense"><?= $this->expenses[$transaction->expense_id]->name ?></td>
				<td>
					<?= $this->button(array(
						'text' => 'Delete',
						'class' => 'delete', 
						'url' => array('controller' => 'transaction', 'action' => 'delete', 'transaction_id' => $transaction->id),
						)); ?>
				</td>
			</tr>
			<?php endforeach; ?>
		</tbody>
	</table>
	<?= $this->paginator ?>
</div>
<div class="clearfix"></div>
<script type="text/javascript">
var editableUrl = '/transaction/edit-value/';

function refreshTransactions(data)
{
	var tabData = {};
	if(typeof(data.last_date) != 'undefined')
	{
		tabData.last_date = data.last_date;
	}

	if(typeof(data.last_expense) != 'undefined')
	{
		tabData.last_expense = data.last_expense;
	}
	
	if(typeof(data.page) != 'undefined')
	{
		tabData.page = data.page
	}
	
	$('#main-tabs').mainTabs('loadTab', tabData);
}

function trimText(value, setting)
{
	var trimmed = $.trim(value);
	if(trimmed == '&nbsp;')
		trimmed = '';

	return trimmed	;
}

function trimCurrency(value, setting)
{
	value = $.trim(value);
	var reg = new RegExp('(\\$|\\,)');
	return value.replace(reg, '');
}

function importTransactions()
{
	var box = $('<div></div>');
	box.load('/transaction/import-form', {format: 'html'}, function(){
		box.dialog({
			modal: true,
			width: 850,
			buttons: {
				Continue: function(){
					var form = $('#import');
					$.post('/transaction/import/format/json', form.serialize(), function(data){
						processJsonResponse(data);
						box.dialog('destroy');
						box.remove()
						refreshTransactions(data);
					}, 'json');
				},
				Cancel: function(){
					$(this).dialog('destroy');
					box.remove()
				}
			},
			close: function() {
				$(this).dialog('destroy');
				box.remove()
			}
		});
	});
}

$(document).ready(function(){
	$('#transaction input.datepicker').datepicker();
	<?php if($this->import) : ?>
	importTransactions();
	<?php endif; ?>
	
	$('#new-transaction').button().click(function(){
		var self = $(this);
		var form = $('#transaction');
		var url = self.attr('data-url');
		$.post(url + '/format/json', form.serialize(), function(data){
			if(data.form != undefined && data.form !== '')
			{
				$('#form-transaction').replaceWith(data.form);
				$('input.datepicker', form).datepicker();
			}
			else
			{
				refreshTransactions(data);
				processJsonResponse(data);
			}
		});
	});

	$('#upload-input').uploadify({
		uploader: '/uploadify/uploadify.swf',
		script: '/transaction/upload/',
		cancelImg: '/uploadify/cancel.png',
		auto: true,
		fileDataName: 'file',
		scriptData: {
			<?= session_name() ?>: '<?= session_id() ?>'
		},
		onError : function(event, queueId, fileObj, errorObj){
			console.log(errorObj);
		},
		onComplete: function(event, queueID, fileObj, response, data) { 
			if(response == 'import')
			{
				importTransactions();
			}
		}
	});

	$('.transaction .expense').each(function(){
		var transaction = $(this).parent().attr('data-transaction');
		$(this).editable(editableUrl, {
			data: <?= json_encode($this->expenseOptions, JSON_FORCE_OBJECT) ?>,
			type: 'select',
			submit: 'Ok',
			submitdata: {
				format: 'html',
				transaction_id: transaction,
				column: 'expense_id'
			}
		});
	});

	$('.transaction .check_num').each(function(){
		var transaction = $(this).parent().attr('data-transaction');
		$(this).editable(editableUrl, {
			data: trimText,
			type: 'text',
			width: 50,
			submit: 'Ok',
			submitdata: {
				format: 'html',
				transaction_id: transaction,
				column: 'check_num'
			}
		});
	});

	$('.transaction .description').each(function(){
		var transaction = $(this).parent().attr('data-transaction');
		$(this).editable(editableUrl, {
			data: trimText,
			type: 'text',
			width: 500,
			submit: 'Ok',
			submitdata: {
				format: 'html',
				transaction_id: transaction,
				column: 'description'
			}
		});
	});

	$('.transaction .amount').each(function(){
		var transaction = $(this).parent().attr('data-transaction');
		$(this).editable(editableUrl, {
			data: trimCurrency,
			type: 'text',
			width: 75,
			submit: 'Ok',
			submitdata: {
				format: 'html',
				transaction_id: transaction,
				column: 'amount'
			}
		});
	});
	
	$('.transaction .date').each(function(){
		var transaction = $(this).parent().attr('data-transaction');
		$(this).editable(editableUrl, {
			type: 'datepicker',
			width: 75,
			submit: 'Ok',
			submitdata: {
				format: 'html',
				transaction_id: transaction,
				column: 'date'
			}
		});
	});
	
	$('.transaction .delete').each(function(){
		var button = $(this);
		var url = button.attr('data-url');
		button.button({
			icons: {
				primary: 'ui-icon-trash'
			},
			text: false
		});
		
		button.click(function(){
			$.post(url, {format: 'json'}, function(data){
				refreshTransactions(data);
				processJsonResponse(data);
			});
		});
	});
	
	$('.paginationControl a').click(function(){
		var url = $(this).attr('href');
		var parts = url.split('/');
		refreshTransactions({page: parts[3]});
		return false;
	});
});
</script>